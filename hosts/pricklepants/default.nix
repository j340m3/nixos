{ modulesPath, config, pkgs, lib, inputs, constants, ... }: 
let rootPath = ../../.;
in
{
  imports = [
    ./hardware-configuration.nix
    (modulesPath + "/profiles/minimal.nix")
    (modulesPath + "/profiles/headless.nix")
    ../../modules/hardening.nix
    #../../modules/matrix2.nix
    #../../modules/minetest.nix
    #../../modules/vaultwarden.nix
    ../../modules/logging.nix
    #../../modules/zabbix.nix
    #../../modules/nextcloud.nix
    #../../modules/dns-tunnel.nix
    #../../modules/immich-proxy.nix
    ../../modules/common
  ];
  #swapDevices = [ { device = "/swapfile"; size = 512; } ];
  boot.tmp.cleanOnBoot = true;
  zramSwap.enable = true;
  #boot.kernelPackages = pkgs.linuxPackages_zen;
  
  #system.autoUpgrade.dates = lib.mkForce "daily";
  #nix.gc.dates = lib.mkForce "hourly";
  nix.package = pkgs.nix;

  environment.systemPackages = with pkgs; [
    #bc
    #ipcalc
    #curl
    #procps
    #lynis
    git
    #chkrootkit
    #nix-tree
    nebula
  ];

  networking.hostName = "pricklepants";
  #services.fail2ban.enable = true;
  services.openssh = {
    ports = [42069];
    enable = true;
    settings.PasswordAuthentication = false;
    settings.KbdInteractiveAuthentication = lib.mkDefault false;
    settings.PermitRootLogin = "no";
    settings.AllowGroups = [ "wheel" ];
    settings.AllowTcpForwarding = "no";
    settings.ClientAliveCountMax = 2;
    settings.MaxAuthTries = 3;
    settings.MaxSessions = 2;
    settings.TCPKeepAlive = "no";
    settings.AllowAgentForwarding = "no";
  };
  #services.prometheus.enable = true;
  #services.icingaweb2.enable = true;
  users.mutableUsers = false;
  users.users.root.openssh.authorizedKeys.keys = [''ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKv3fhY8KfwN4GFxXpbWLCfNl4ZP+v+C59CIxXhj0SyB jerome@DESKTOP-B7K2FBB'' ];
  users.users.root.packages = with pkgs; [
    openssl
  ];
  users.users.donquezz = {
    isNormalUser  = true;
    home  = "/home/donquezz";
    description  = "Jerome";
    extraGroups  = [ "wheel" "networkmanager" ];
    hashedPassword = "$y$j9T$xI3Gvnwn4Q900uL0HQZHp/$fl5oFfnZWZWBz.6gPxvciND13komHHAXDqq6Yfpjn17";
    openssh.authorizedKeys.keys = [
	    ''ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKv3fhY8KfwN4GFxXpbWLCfNl4ZP+v+C59CIxXhj0SyB jerome@DESKTOP-B7K2FBB'' 
      ''ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICBx/L/AY2505t1Sj1yyugnK6Cf2QuIECx8kXxyoks3f jeromeb@nixos''
      ''ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHVNoVYUWvAghff/jL6lHW80p73L/eGWDMUDeJ4TpZeO jerome@DESKTOP-4SBFVCM''
      ''ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIG8Wfyik+a9oL7hPG3T72maa14lYmI+k6fzqZP/t59MK Generated By Termius''
	    ''ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPMPF4zMcL0S5KGgVwrUMj5HVlZtVfdVR7gfQgnv3mpq jeromeb@woody''
    ];
  };
  
  sops = {
    defaultSopsFile = rootPath + "/secrets/example.yaml";
    age = {
      keyFile = "/var/lib/sops-nix/key.txt";
    };
    secrets = {
      "telegram/bot_token" = {};
      "telegram/group_id" = {};
    };
  };

  
  system.stateVersion = "23.11";
  nix.gc = {
    automatic = true;
    #dates = "hourly";
    options = "--delete-older-than 30d";
  }; 

  
  security.sudo.wheelNeedsPassword = true;
  
services.nginx = {
  enable = true;
  virtualHosts.localhost = {
    forceSSL = true;
    listen = [{port = 442;  addr="0.0.0.0"; ssl=true;}];
    #onlySSL = true;
    #listen = [{
    #addr = "localhost";
    #port = 443;
    #ssl = true;
    #}];
    locations."/" = {
      return = "200 '<html><body>It works</body></html>'";
      extraConfig = ''
        default_type text/html;
      '';
    };
    sslCertificate = "/etc/nixos-selfsigned.crt";
    sslCertificateKey = "/etc/nixos-selfsigned.key";
  };
};
  
  services.logrotate.enable = true;
  services.logrotate.checkConfig = false;


  # environment.systemPackages = with pkgs; [ nebula ];
  services.nebula.networks.mesh = {
    enable = true;
    isLighthouse = true;
    isRelay = true;
    cert = "/etc/nebula/pricklepants.crt"; # The name of this lighthouse is beacon.
    key = "/etc/nebula/pricklepants.key";
    ca = "/etc/nebula/ca.crt";
    staticHostMap = {
        "10.0.0.5" = [ "194.164.54.40:4242" ];
        };
    settings = {
      lighthouse = {
        serve_dns = true;
        dns = {
          host = "0.0.0.0";
          port = 53;
        };
      };
      cipher = "aes";
      punchy = {
        punch = true;
        reload = true;
      };
    };
    firewall.outbound = [
      {
      cidr = constants.nebula.cidr;
      port = "any";
      proto = "any";
      }
    ];
    firewall.inbound = [
    {
      cidr = constants.nebula.cidr;
      port = "42069";
      proto = "tcp";
    }
    {
      cidr = constants.nebula.cidr;
      port = "any";
      proto = "icmp";
    }
    {
      cidr = constants.nebula.cidr;
      port = "53";
      proto = "udp";
    }
    {
      cidr = constants.nebula.cidr;
      port = "10050";
      proto = "any";
    }
    ];
  };
  
  systemd.services."nebula@mesh".serviceConfig = {
        CapabilityBoundingSet = lib.mkForce "CAP_NET_ADMIN CAP_NET_BIND_SERVICE";
        AmbientCapabilities = lib.mkForce "CAP_NET_ADMIN CAP_NET_BIND_SERVICE";
  };
  # allow nebula to claim port 53 from systemd-resolved
  services.resolved.extraConfig = ''
    DNSStubListener=no
  '';
  # open the systems firewall for DNS only on the nebula interface
  networking.firewall.interfaces."nebula.mesh".allowedUDPPorts = [ 53 ];
}

